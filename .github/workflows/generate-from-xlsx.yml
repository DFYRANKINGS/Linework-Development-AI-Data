# ai-generators/generate_files_from_xlsx.py

import argparse
import os
import json
import yaml
from pathlib import Path
import pandas as pd

def load_xlsx_to_dict(xlsx_path):
    print(f"üìÇ Reading Excel file: {xlsx_path}")
    try:
        df = pd.read_excel(xlsx_path, sheet_name=0, header=None)
        print(f"üìä Sheet loaded. Shape: {df.shape}")
        print("üìã First 5 rows:")
        print(df.head().to_string())
    except Exception as e:
        print(f"‚ùå ERROR loading Excel: {e}")
        return {}

    data = {}
    for idx, row in df.iterrows():
        if len(row) >= 2:
            key_cell = row[0]
            value_cell = row[1] if len(row) > 1 else None

            if pd.isna(key_cell) or pd.isna(value_cell):
                print(f"‚ö†Ô∏è Skipping row {idx+1}: missing key or value")
                continue

            key = str(key_cell).strip()
            value = value_cell

            # Try to convert numeric/bool if possible
            if isinstance(value, str):
                if value.lower() in ['true', 'false']:
                    value = value.lower() == 'true'
                else:
                    try:
                        value = int(value)
                    except:
                        try:
                            value = float(value)
                        except:
                            pass
            data[key] = value
            print(f"‚úÖ Parsed: {key} = {value}")

    print(f"üì¶ Final parsed data ({len(data)} keys):")
    for k, v in data.items():
        print(f"   {k}: {v}")

    return data

def write_json_yaml(data, base_output_path, filename_base):
    """Write both .json and .yaml files"""
    json_path = base_output_path / f"{filename_base}.json"
    yaml_path = base_output_path / f"{filename_base}.yaml"

    # Ensure directory exists
    base_output_path.mkdir(parents=True, exist_ok=True)

    # Write JSON
    try:
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ Wrote JSON: {json_path}")
    except Exception as e:
        print(f"‚ùå Failed to write JSON: {e}")

    # Write YAML
    try:
        with open(yaml_path, 'w', encoding='utf-8') as f:
            yaml.dump(data, f, allow_unicode=True, sort_keys=False)
        print(f"üíæ Wrote YAML: {yaml_path}")
    except Exception as e:
        print(f"‚ùå Failed to write YAML: {e}")

    return json_path.exists() and yaml_path.exists()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--input', required=True, help='Path to input .xlsx file')
    args = parser.parse_args()

    # Debug: show current working dir and list files
    print(f"(pwd) Current working directory: {os.getcwd()}")
    print(f"üìÅ Files in templates/:")
    os.system("ls -la templates/")

    if not os.path.exists(args.input):
        print(f"‚ùå FATAL: Input file NOT FOUND: {args.input}")
        exit(1)
    else:
        print(f"‚úÖ Input file FOUND: {args.input}")

    # Load data
    data = load_xlsx_to_dict(args.input)

    if len(data) == 0:
        print("‚ùå No data parsed from XLSX. Check format: Column A = keys, Column B = values.")
        exit(1)

    # Determine output filename from input
    input_stem = Path(args.input).stem
    output_name = input_stem.replace("client-", "main-")

    # Output to schema-files/organization/
    output_dir = Path("schema-files/organization")
    
    success = write_json_yaml(data, output_dir, output_name)

    if not success:
        print("‚ùå File writing failed!")
        exit(1)

    # Also save SITE_BASE_URL if present in data (for sitemap later)
    site_url = data.get('website') or data.get('Website') or data.get('URL') or os.getenv('SITE_BASE_URL')
    if site_url:
        config_dir = Path(".github/config")
        config_dir.mkdir(parents=True, exist_ok=True)
        with open(config_dir / "site_url.txt", "w") as f:
            f.write(site_url.strip())
        print(f"üåê Site URL saved: {site_url}")
    else:
        print("‚ö†Ô∏è No 'website' key found in XLSX and no SITE_BASE_URL secret set.")

if __name__ == "__main__":
    main()
